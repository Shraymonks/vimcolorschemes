@mixin button-reset {
  font-family: var(--standard-font-family);
  font-size: var(--standard-font-size);

  border: none;
  background: none;
  padding: 0;
  margin: 0;
  color: inherit;
  cursor: pointer;

  &:hover,
  &:focus {
    outline: none;
    border: none;
  }
}

@mixin hover-border {
  @media (hover: hover) and (pointer: fine) {
    border-radius: 0;
    box-shadow: 0px 2px 0px 0px var(--focus-border);
  }
}

@mixin focus-border($color: var(--focus-border)) {
  @media (hover: hover) and (pointer: fine) {
    border-radius: var(--standard-border-radius);
    box-shadow: 0px 0px 0px 2px $color;
    outline: none;
  }
}

@mixin inverted-padding {
  padding: var(--standard-space);
  margin: calc(var(--standard-space) * -1);
}

@mixin focusable-style {
  @include inverted-padding;
  &:hover {
    @include hover-border;
  }
  &:focus {
    @include focus-border;
  }
}

@mixin breakpoint($point) {
  @if $point == small {
    @media screen and (min-width: 576px) {
      @content;
    }
  } @else if $point == medium {
    @media screen and (min-width: 768px) {
      @content;
    }
  } @else if $point == large {
    @media screen and (min-width: 992px) {
      @content;
    }
  } @else if $point == extra-large {
    @media screen and (min-width: 1200px) {
      @content;
    }
  } @else {
    @media screen and (min-width: $point) {
      @content;
    }
  }
}

/**
 * Returns the value in rem
 *
 * @param value - The value in px
 * @returns The value in rem
 */
@function rem($value) {
  @return math.div(strip-units($value), 16) * 1rem;
}

/**
 * Returns the value in em
 *
 * @param value - The value in px
 * @returns The value in em
 */
@function em($value) {
  @return math.div(strip-units($value), 16) * 1em;
}

/**
 * Strips the value of its suffix (ex: px)
 *
 * @param value - The value with a suffix
 * @returns The value without the suffix
 */
@function strip-units($number) {
  @return math.div($number, $number * 0 + 1);
}
